image: node:14.17.0

variables:
  STAGING_DOMAIN: denisgjonmarkaj-staging.surge.sh
  PRODUCTION_DOMAIN: denisgjonmarkaj.surge.sh

stages:
  - build_and_test
  - deploy_review
  - deploy_staging
  - test_staging
  - deploy_production
  - post-deploy
  - scheduled-check

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm/

build_and_test:
  stage: build_and_test
  script:
    - npm config set cache .npm
    - npm install
    - npm install -g htmlhint http-server
    - echo $CI_COMMIT_SHORT_SHA
    - mkdir .public
    - cp -r * .public
    - mv .public public
    - echo $CI_COMMIT_SHORT_SHA > public/version.txt
    - htmlhint **/*.html
    - grep -q "Starting as a software" public/index.html
    - http-server public -p 8080 &
    - sleep 5
    - curl -s "http://localhost:8080" | grep "Starting as a software" || echo "Content not found"
    - pkill -f http-server
  artifacts:
    paths:
      - public

deploy_review:
  stage: deploy_review
  script:
    - npm install --global surge
    - surge --project ./public --domain denisgjonmarkaj-$CI_ENVIRONMENT_SLUG.surge.sh
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://denisgjonmarkaj-$CI_ENVIRONMENT_SLUG.surge.sh
    on_stop: stop_review
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"  
    # Ho modificato la condizione di esecuzione da only: - merge_requests a
    # rules: - if: $CI_PIPELINE_SOURCE == "merge_request_event"   

stop_review:
  stage: deploy_review
  script:
    - npm install --global surge
    - surge teardown denisgjonmarkaj-$CI_ENVIRONMENT_SLUG.surge.sh
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual

deploy to staging:
  stage: deploy_staging
  script:
    - npm install --global surge
    - surge --project ./public --domain $STAGING_DOMAIN
  environment:
    name: staging
    url: https://$STAGING_DOMAIN

test staging:
  stage: test_staging
  script:
    - |
      sleep 30
      DEPLOYED_VERSION=$(curl -s "https://$STAGING_DOMAIN/version.txt")
      echo "Deployed version on staging: $DEPLOYED_VERSION"
      echo "Expected version: $CI_COMMIT_SHORT_SHA"
      test "$DEPLOYED_VERSION" = "$CI_COMMIT_SHORT_SHA"
  needs:
    - deploy to staging

pages:
  stage: deploy_production
  script:
    - echo "Deploying to GitLab Pages"
  artifacts:
    paths:
      - public
  only:
    - main

deploy to production:
  stage: deploy_production
  script:
    - npm install --global surge
    - surge --project ./public --domain $PRODUCTION_DOMAIN
  environment:
    name: production
    url: https://$PRODUCTION_DOMAIN
  only:
    - main
  when: manual

test deployment:
  stage: post-deploy
  script: 
    - |
      sleep 30
      DEPLOYED_VERSION=$(curl -s "https://$PRODUCTION_DOMAIN/version.txt")
      echo "Deployed version: $DEPLOYED_VERSION"
      echo "Expected version: $CI_COMMIT_SHORT_SHA"
      test "$DEPLOYED_VERSION" = "$CI_COMMIT_SHORT_SHA"
  needs:
    - job: deploy to production
      optional: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success

daily check:
  stage: scheduled-check
  script:
    - |
      DEPLOYED_VERSION=$(curl -s "https://$PRODUCTION_DOMAIN/version.txt")
      echo "Deployed version: $DEPLOYED_VERSION"
      echo "Expected version: $CI_COMMIT_SHORT_SHA"
      if [ "$DEPLOYED_VERSION" = "$CI_COMMIT_SHORT_SHA" ]; then
        echo "Version check passed!"
      else
        echo "Version mismatch! Triggering new deployment..."
        exit 1
      fi
  only:
    - schedules
